// http://jedicoder.blogspot.com.es/2011/11/automated-gradle-project-deployment-to.html
buildscript {
	ext.kotlin_version = kotlinVersion
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

plugins {
	id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'idea'

//tasks.withType(Test) {
//	scanForTestClasses = false
//	include "**/*Test.class" // whatever Ant pattern matches your test class files
//}

def props = rootProject.ext

if (!props.has("publicationVersion")) {
	//println("CALC publicationVersion")
	props.set("publicationVersion", "")
	if (jtranscVersion.endsWith("-SNAPSHOT")) {
		try {
			props.set("publicationVersion", "git describe --tags".execute().text.trim())
		} catch (Throwable e) {
			e.printStackTrace()
		}
	} else {
		props.set("publicationVersion", jtranscVersion)
	}
}

String publicationVersion = ("" + props.get("publicationVersion")).trim()

allprojects { project ->
	//task hello << {task ->
	//	println "I'm $task.project.name: ${task.project.ext.jtranscVersion}"
	//}
	repositories {
		jcenter()
	}
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'java'
	apply plugin: 'com.jfrog.bintray'

	project.ext.kotlin_version = kotlinVersion
	project.ext.group = "com.jtransc"
	//project.ext.jtranscVersion = "${jtranscVersion}"
	project.ext.actualJtranscVersion = "${jtranscVersion}"
	project.ext.jtranscVersion = "${publicationVersion}"
	project.ext.publicationVersion = "${publicationVersion}"


	//apply from: '../include.gradle'
}

def sed = { String file, /* language=RegExp */ String regexp, String replacement ->
	def f = new File(file)
	def content = f.getText("UTF-8")
	def res = content.replaceAll(regexp, replacement)
	//println(res)
	f.write(res)
}

task updateVersion() {
	doLast {
		def newversion = jtranscVersion
		println "Updating to version '$newversion'"
		sed("jtransc-rt-core/src/com/jtransc/JTranscVersion.java", 'static private final String version = "(.*)"', "static private final String version = \"$newversion\"")
		sed("gradle.properties", 'jtranscVersion=(.*)', "jtranscVersion=$newversion")
		sed("jtransc-main-run/example-gradle/gradle.properties", 'jtranscVersion=(.*)', "jtranscVersion=$newversion")
		sed("benchmark/gradle.properties", 'jtranscVersion=(.*)', "jtranscVersion=$newversion")
		sed("jtransc-maven-plugin/resources/META-INF/maven/com.jtransc/jtransc-maven-plugin/pom.properties", 'version=(.*)', "version=$newversion")
		sed("jtransc-main-run/pom.xml", '<!--jtransc--><version>(.*)<\\/version>', "<!--jtransc--><version>$newversion</version>")
		sed("jtransc-maven-plugin/example/pom.xml", '<!--jtransc--><version>(.*)<\\/version>', "<!--jtransc--><version>$newversion</version>")
		sed("jtransc-maven-plugin/resources/META-INF/maven/com.jtransc/jtransc-maven-plugin/plugin-help.xml", '<!--jtransc--><version>(.*)<\\/version>', "<!--jtransc--><version>$newversion</version>")
		sed("jtransc-maven-plugin/resources/META-INF/maven/com.jtransc/jtransc-maven-plugin/pom.xml", '<!--jtransc--><version>(.*)<\\/version>', "<!--jtransc--><version>$newversion</version>")
		sed("jtransc-maven-plugin/resources/META-INF/maven/plugin.xml", '<!--jtransc--><version>(.*)<\\/version>', "<!--jtransc--><version>$newversion</version>")
		sed("README.md", 'id "com.jtransc" version "(.*)"', "id \"com.jtransc\" version \"$newversion\"")
	}
}

task travisDeploy(dependsOn: ['bintrayUpload']) {
	doLast {
		println("Deployed!")
	}
}

task snapshotTask() {
}

task releaseTask() {
}

if ("$jtranscVersion".endsWith("-SNAPSHOT")) {
	travisDeploy.dependsOn('snapshotTask')
} else {
	travisDeploy.dependsOn('releaseTask')
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0'
}

idea {
	module {
		excludeDirs = [
			file(".gradle"), file(".idea"),
			file("docs"), file("benchmark"),
			file("examples"), file("extra"),
			file("gradle"), file("inception"),
			file("jtransc-intellij-plugin"), file("jtransc-main-run")
		]
	}
}